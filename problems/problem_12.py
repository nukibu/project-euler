# Unfinished

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

import sys
from time import time

# List with numbers from 1 to sys.maxsize**10
num_list = []

# List with all calculated triangles and amount of corresponding divisors
# "1": 1, "3": 2
triangle_dict = {}

def calc_triangles(n, divisor_amount):

  for item in range(1, n + 1):
    num_list.append(item)

  for i in range(1, n + 1):
    triangle = sum(num_list[0: i])
    print("Triangle: " + str(triangle))

    # Divides triangle by all numbers from 1 to n
    divisor = 0
    for i in range(1, n + 1):
      if triangle % i == 0:
        divisor += 1
        
    # Adds key and value to dict.
    if divisor >= divisor_amount:
      triangle_dict[i] = divisor
      print("Triangle Found: " + str(triangle))
      print("Divisors: " + str(triangle_dict[i]))
      break
      
    
start = time()
calc_triangles(10, 6)
print(f'Time taken to run: {time() - start} seconds')

# for i in range(1, 28):
#   mod = 28 % i
#   print(str(i) + str(mod))

